--[[ Merged Script: SOULS HUB UI with tst.lua functionality (Version 3) --]]

-- Services (Consolidated)
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local InsertService = game:GetService("InsertService")
local MarketplaceService = game:GetService("MarketplaceService")
local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local TweenService = game:GetService("TweenService")
local UserInputService = game:GetService("UserInputService")
local Lighting = game:GetService("Lighting")
local CoreGui = game:GetService("CoreGui")

-- Player specific variables (from tst.lua.txt)
local LocalPlayer = Players.LocalPlayer
local Leaderstats = LocalPlayer:WaitForChild("leaderstats")
local Backpack = LocalPlayer:WaitForChild("Backpack")
local PlayerGui = LocalPlayer:WaitForChild("PlayerGui")

local ShecklesCount
if Leaderstats and Leaderstats:FindFirstChild("Sheckles") then
    ShecklesCount = Leaderstats.Sheckles
else
    warn("SOULS HUB: Leaderstats or Sheckles not found for LocalPlayer. Some features might not work correctly.")
    ShecklesCount = {Value = 0} -- Placeholder to prevent errors, actual game logic might need more robust handling
end

-- Game specific variables (from tst.lua.txt)
local GameEvents = ReplicatedStorage:WaitForChild("GameEvents")
local Farms = workspace:WaitForChild("Farm")

-- tst.lua.txt state variables
local SeedStock = {}
local OwnedSeeds = {}
local HarvestIgnores = {
    Normal = false,
    Gold = false,
    Rainbow = false
}

local currentSeed = ""
local autoPlant = false
local autoPlantRandom = false
local autoHarvest = false
local selectedBuySeed = ""
local autoBuy = false
local autoSell = false
local sellThreshold = 15
local autoWalk = false
local autoWalkAllowRandom = true
local noClip = false
local autoWalkMaxWait = 10
local autoWalkStatusLabel -- UI element, will be created later

-- SOULS HUB UI Setup (Exact from SOULS HUB.txt)
if CoreGui:FindFirstChild("SOULS_HUB") then
    CoreGui.SOULS_HUB:Destroy()
end

local screenGui = Instance.new("ScreenGui")
screenGui.Name = "SOULS_HUB"
screenGui.Parent = CoreGui
screenGui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling -- Added for better layering
screenGui.Enabled = true -- Ensure it's enabled

local mainFrame = Instance.new("Frame")
mainFrame.Name = "MainFrame"
mainFrame.Size = UDim2.new(0, 700, 0, 380) -- Original size from SOULS HUB
mainFrame.Position = UDim2.new(0.5, 0, 0.5, 0)
mainFrame.AnchorPoint = Vector2.new(0.5, 0.5)
mainFrame.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
mainFrame.BackgroundTransparency = 0.1 -- Original transparency
mainFrame.BorderSizePixel = 0
mainFrame.ClipsDescendants = true
mainFrame.ZIndex = 1
mainFrame.Visible = false -- Start hidden
mainFrame.Parent = screenGui

local outline = Instance.new("UIStroke")
outline.Color = Color3.new(1, 1, 1)
outline.Thickness = 2
outline.Transparency = 0.1
outline.Parent = mainFrame

local corner = Instance.new("UICorner")
corner.CornerRadius = UDim.new(0, 16)
corner.Parent = mainFrame

local gradient = Instance.new("UIGradient")
gradient.Rotation = 90
gradient.Transparency = NumberSequence.new({
    NumberSequenceKeypoint.new(0, 0.6),
    NumberSequenceKeypoint.new(1, 0.8)
})
gradient.Parent = mainFrame

local toggleBtn = Instance.new("TextButton")
toggleBtn.Name = "ToggleButton"
toggleBtn.Size = UDim2.new(0, 140, 0, 40)
toggleBtn.Position = UDim2.new(0.5, -70, 0, 20)
toggleBtn.AnchorPoint = Vector2.new(0.5, 0)
toggleBtn.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
toggleBtn.BackgroundTransparency = 0.3
toggleBtn.Text = "TOGGLE MENU"
toggleBtn.TextColor3 = Color3.new(1, 1, 1)
toggleBtn.Font = Enum.Font.GothamBold
toggleBtn.TextSize = 14
toggleBtn.Visible = true -- Make it visible so user can open menu
toggleBtn.ZIndex = 10
toggleBtn.Parent = screenGui

local toggleTextOutline = Instance.new("UIStroke")
toggleTextOutline.Color = Color3.new(0, 0, 0)
toggleTextOutline.Thickness = 1
toggleTextOutline.Transparency = 0
toggleTextOutline.Parent = toggleBtn

local toggleCorner = Instance.new("UICorner")
toggleCorner.CornerRadius = UDim.new(0, 12)
toggleCorner.Parent = toggleBtn

local toggleOutline = Instance.new("UIStroke")
toggleOutline.Color = Color3.new(1, 1, 1)
toggleOutline.Thickness = 1
toggleOutline.Transparency = 0.2
toggleOutline.Parent = toggleBtn

-- Dragging Function (from SOULS HUB.txt)
local function makeDraggable(frame)
    local dragging = false
    local dragInput, dragStart, startPos

    frame.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
            dragging = true
            dragStart = input.Position
            startPos = frame.Position
            -- Store the input object that started the drag
            dragInput = input 
            local connection
            connection = input.Changed:Connect(function(property)
                if input.UserInputState == Enum.UserInputState.End then
                    dragging = false
                    dragInput = nil -- Clear dragInput
                    if connection then connection:Disconnect() end
                end
            end)
        end
    end)

    frame.InputEnded:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
            if dragging and (not dragInput or input == dragInput) then
                 dragging = false
                 dragInput = nil
            end
        end
    end)

    UserInputService.InputChanged:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch then
            if dragging and dragInput then 
                if input.UserInputType == Enum.UserInputType.Touch and input ~= dragInput then return end
                local delta = input.Position - dragStart
                frame.Position = UDim2.new(
                    startPos.X.Scale,
                    startPos.X.Offset + delta.X,
                    startPos.Y.Scale,
                    startPos.Y.Offset + delta.Y
                )
            end
        end
    end)
end
makeDraggable(mainFrame)
makeDraggable(toggleBtn) -- As per original SOULS HUB.txt

-- Toggle and Close Button Logic (from SOULS HUB.txt - no animation, just visibility toggle)
toggleBtn.MouseButton1Click:Connect(function()
    mainFrame.Visible = not mainFrame.Visible
end)

local closeBtn = Instance.new("TextButton")
closeBtn.Name = "CloseButton"
closeBtn.Size = UDim2.new(0, 30, 0, 30)
closeBtn.Position = UDim2.new(1, -35, 0, 10)
closeBtn.AnchorPoint = Vector2.new(1, 0)
closeBtn.BackgroundTransparency = 1
closeBtn.Text = "X"
closeBtn.TextColor3 = Color3.new(1, 1, 1)
closeBtn.TextSize = 20
closeBtn.Font = Enum.Font.GothamBold
closeBtn.ZIndex = 3
closeBtn.Parent = mainFrame

local closeTextOutline = Instance.new("UIStroke")
closeTextOutline.Color = Color3.new(0, 0, 0)
closeTextOutline.Thickness = 1
closeTextOutline.Transparency = 0
closeTextOutline.Parent = closeBtn

closeBtn.MouseButton1Click:Connect(function()
    mainFrame.Visible = false
end)

local titleFont = Enum.Font.GothamBold -- From SOULS HUB.txt
local titleText = Instance.new("TextLabel")
titleText.Name = "Title"
titleText.Size = UDim2.new(0, 200, 0, 30)
titleText.Position = UDim2.new(0, 20, 0, 10)
titleText.BackgroundTransparency = 1
titleText.Text = "Souls Hub" -- Title from tst.lua.txt context
titleText.TextColor3 = Color3.new(1, 1, 1)
titleText.TextSize = 24
titleText.Font = titleFont
titleText.TextXAlignment = Enum.TextXAlignment.Left
titleText.ZIndex = 2
titleText.Parent = mainFrame

local titleTextOutline = Instance.new("UIStroke")
titleTextOutline.Color = Color3.new(0, 0, 0)
titleTextOutline.Thickness = 1
titleTextOutline.Transparency = 0
titleTextOutline.Parent = titleText

local titleGlow = Instance.new("UIGradient") -- From SOULS HUB.txt
titleGlow.Color = ColorSequence.new({
    ColorSequenceKeypoint.new(0, Color3.new(1, 1, 1)),
    ColorSequenceKeypoint.new(0.5, Color3.new(0.85, 0.85, 0.85)),
    ColorSequenceKeypoint.new(1, Color3.new(1, 1, 1))
})
titleGlow.Rotation = -45
titleGlow.Transparency = NumberSequence.new(0.6)
titleGlow.Parent = titleText

-- Separators (from SOULS HUB.txt)
local topSeparator = Instance.new("Frame")
topSeparator.Name = "TopSeparator"
topSeparator.Size = UDim2.new(1, -40, 0, 1)
topSeparator.Position = UDim2.new(0, 20, 0, 50)
topSeparator.BackgroundColor3 = Color3.new(1, 1, 1)
topSeparator.BorderSizePixel = 0
topSeparator.ZIndex = 2
topSeparator.Parent = mainFrame

local verticalSeparator = Instance.new("Frame")
verticalSeparator.Name = "VerticalSeparator"
verticalSeparator.Size = UDim2.new(0, 1, 1, -120) -- Original SOULS HUB size
verticalSeparator.Position = UDim2.new(0, 170, 0, 70) -- Original SOULS HUB position
verticalSeparator.BackgroundColor3 = Color3.new(1, 1, 1)
verticalSeparator.BorderSizePixel = 0
verticalSeparator.ZIndex = 2
verticalSeparator.Parent = mainFrame

-- Tab System Containers (from SOULS HUB.txt)
local tabContainer = Instance.new("Frame")
tabContainer.Name = "Tabs"
tabContainer.Size = UDim2.new(0, 150, 0, 280) -- Original SOULS HUB size
tabContainer.Position = UDim2.new(0, 15, 0, 70) -- Original SOULS HUB position
tabContainer.BackgroundTransparency = 1
tabContainer.ZIndex = 2
tabContainer.Parent = mainFrame
-- NO UIListLayout in tabContainer as per original SOULS HUB structure

local contentContainer = Instance.new("Frame")
contentContainer.Name = "Content"
contentContainer.Size = UDim2.new(0, 500, 0, 280) -- Original SOULS HUB size
contentContainer.Position = UDim2.new(1, -515, 0, 70) -- Original SOULS HUB position
contentContainer.BackgroundTransparency = 1
contentContainer.ZIndex = 2
contentContainer.Parent = mainFrame

-- Whitelist from SOULS HUB (used in its createButton function)
local WHITELISTED_USERS = {
    "tanveerstink", "bobbyjack_9", "Manfaceprorobloxyay", "xlzzzmain",
    "bestgkrivalsb1", "Orange_Boy361", "ajjbsbbsb2223", "Min85500",
    "ArthDutta", "GivingisGood_6", "HWIllLAlIlIIllWWBlIl", "sfsfafafsaf13",
    "Msi_astro", "dracobot_17", "untamkne330", "DRIP_BACONtwo",
    "whohurtyoudear", "topraklife", "ronixtest123", "ClawKnight50",
    "sadwasgfsagas", "TimofeyUl", "SkinnyDic692", "officialbacontoast_8"
}

-- UI Creation Functions (Exact from SOULS HUB.txt, with added tab switching logic)
local currentActiveTabButton = nil
local currentActiveContentFrame = nil

local function switchTab(tabButtonToActivate, contentFrameToActivate)
    if currentActiveTabButton == tabButtonToActivate then return end -- Already active

    if currentActiveTabButton and currentActiveContentFrame then
        currentActiveTabButton.TextTransparency = 0.5
        currentActiveTabButton.TextColor3 = Color3.new(1, 1, 1) -- Default/Inactive color
        -- Remove active indicator if one was added (e.g., background change or specific element)
        -- For SOULS HUB, it seems only TextTransparency changes for tabs.
        currentActiveContentFrame.Visible = false
    end

    tabButtonToActivate.TextTransparency = 0 -- Active style
    -- SOULS HUB.txt doesn't specify a different active text color, so we keep it white but opaque.
    contentFrameToActivate.Visible = true

    currentActiveTabButton = tabButtonToActivate
    currentActiveContentFrame = contentFrameToActivate
end

local function createTab(tabName) -- As per SOULS HUB.txt structure
    local tabButton = Instance.new("TextButton")
    tabButton.Name = tabName
    tabButton.Size = UDim2.new(0, 140, 0, 30)
    tabButton.Position = UDim2.new(0, 0, 0, #tabContainer:GetChildren() * 35) -- Manual positioning
    tabButton.BackgroundTransparency = 1
    tabButton.Text = tabName
    tabButton.TextColor3 = Color3.new(1, 1, 1)
    tabButton.TextSize = 18
    tabButton.Font = Enum.Font.GothamBold
    tabButton.TextTransparency = 0.5 -- Default to inactive
    tabButton.ZIndex = 3
    tabButton.Parent = tabContainer

    local tabTextOutline = Instance.new("UIStroke")
    tabTextOutline.Color = Color3.new(0, 0, 0)
    tabTextOutline.Thickness = 1
    tabTextOutline.Transparency = 0.5
    tabTextOutline.Parent = tabButton

    local tabButtonOutline = Instance.new("UIStroke") -- This is the border for the tab button itself
    tabButtonOutline.Color = Color3.new(1, 1, 1)
    tabButtonOutline.Thickness = 1
    tabButtonOutline.Transparency = 0.5
    tabButtonOutline.Parent = tabButton

    local contentFrame = Instance.new("ScrollingFrame")
    contentFrame.Name = tabName .. "Content"
    contentFrame.Size = UDim2.new(1, 0, 1, 0) -- Fill contentContainer
    contentFrame.Position = UDim2.new(0,0,0,0)
    contentFrame.BackgroundTransparency = 1 -- Content area background is transparent
    contentFrame.Visible = false
    contentFrame.ScrollBarThickness = 5
    contentFrame.AutomaticCanvasSize = Enum.AutomaticSize.Y
    contentFrame.CanvasSize = UDim2.new(0,0,0,0) -- Important for ScrollingFrame
    contentFrame.Parent = contentContainer
    
    local contentPadding = Instance.new("UIPadding", contentFrame)
    contentPadding.PaddingTop = UDim.new(0, 10)
    contentPadding.PaddingBottom = UDim.new(0, 10)
    contentPadding.PaddingLeft = UDim.new(0, 10)
    contentPadding.PaddingRight = UDim.new(0, 10)

    local contentLayout = Instance.new("UIListLayout", contentFrame)
    contentLayout.Padding = UDim.new(0, 8) 
    contentLayout.SortOrder = Enum.SortOrder.LayoutOrder
    contentLayout.HorizontalAlignment = Enum.HorizontalAlignment.Left -- Defaulting to left

    tabButton.MouseButton1Click:Connect(function()
        switchTab(tabButton, contentFrame)
    end)

    return contentFrame -- Return content frame for adding elements
end

local function addCategory(parent, text) -- As per SOULS HUB.txt
    local category = Instance.new("TextLabel")
    category.Name = text.."Category"
    category.Size = UDim2.new(0, 200, 0, 20) -- Original size
    category.Position = UDim2.new(0, 0, 0, #parent:GetChildren() * 45) -- Original positioning logic
    category.BackgroundTransparency = 1
    category.Text = text
    category.TextColor3 = Color3.new(1, 1, 1)
    category.TextSize = 16
    category.Font = titleFont -- Use the defined titleFont
    category.TextXAlignment = Enum.TextXAlignment.Left
    category.ZIndex = 3
    category.Parent = parent
    
    -- If parent uses UIListLayout, adjust for it
    if parent:FindFirstChildOfClass("UIListLayout") then
        category.LayoutOrder = #parent:GetChildren() 
        category.Position = UDim2.new(0,0,0,0) -- Reset position
        category.Size = UDim2.new(1, -20, 0, 25) -- Full width with padding
        category.TextXAlignment = Enum.TextXAlignment.Center -- Center category titles
        category.Text = "--- " .. text .. " ---" -- Common category style
    end

    local categoryTextOutline = Instance.new("UIStroke")
    categoryTextOutline.Color = Color3.new(0, 0, 0)
    categoryTextOutline.Thickness = 1
    categoryTextOutline.Transparency = 0
    categoryTextOutline.Parent = category
    return category
end

local function createButton(parent, buttonText, func) -- As per SOULS HUB.txt
    local button = Instance.new("TextButton")
    button.Name = buttonText
    button.Size = UDim2.new(0, 200, 0, 40) -- Original size
    button.Position = UDim2.new(0, 0, 0, #parent:GetChildren() * 45) -- Original positioning logic
    button.BackgroundTransparency = 1
    button.Text = buttonText
    button.TextColor3 = Color3.new(1, 1, 1)
    button.Font = Enum.Font.GothamBold
    button.TextSize = 14
    button.ZIndex = 3

    -- If parent uses UIListLayout, adjust for it
    if parent:FindFirstChildOfClass("UIListLayout") then
        button.LayoutOrder = #parent:GetChildren()
        button.Position = UDim2.new(0,0,0,0) -- Reset position
        button.Size = UDim2.new(0, 220, 0, 35) -- Standardized size for list layout
        button.BackgroundTransparency = 0.7 -- Give buttons some background in list
        button.BackgroundColor3 = Color3.fromRGB(50,50,50)
    end

    local buttonTextOutline = Instance.new("UIStroke")
    buttonTextOutline.Color = Color3.new(0, 0, 0)
    buttonTextOutline.Thickness = 1
    buttonTextOutline.Transparency = 0.3
    buttonTextOutline.Parent = button

    local outline = Instance.new("UIStroke")
    outline.Color = Color3.new(1, 1, 1)
    outline.Thickness = 1
    outline.Transparency = 0.3
    outline.Parent = button

    local corner = Instance.new("UICorner")
    corner.CornerRadius = UDim.new(0, 6)
    corner.Parent = button

    button.MouseButton1Click:Connect(function()
        if string.find(parent.Parent.Name:lower(), "premium") then -- Whitelist check from SOULS HUB
            local playerName = Players.LocalPlayer.Name:lower()
            local isAllowed = false
            for _, name in pairs(WHITELISTED_USERS) do
                if playerName == name:lower() then
                    isAllowed = true
                    break
                end
            end
            if isAllowed then
                if func then pcall(func) end
            else
                CoreGui:SetCore("SendNotification", {
                    Title = "PREMIUM ACCESS DENIED",
                    Text = "DM soulsyt_ TO BUY",
                    Duration = 5
                })
            end
        else
            if func then pcall(func) end
        end
    end)

    button.MouseEnter:Connect(function()
        TweenService:Create(button, TweenInfo.new(0.2), {
            BackgroundTransparency = button.Parent:FindFirstChildOfClass("UIListLayout") and 0.5 or 0.85, -- Adjust hover based on context
            TextColor3 = Color3.new(0.9, 0.9, 0.9)
        }):Play()
    end)

    button.MouseLeave:Connect(function()
        TweenService:Create(button, TweenInfo.new(0.2), {
            BackgroundTransparency = button.Parent:FindFirstChildOfClass("UIListLayout") and 0.7 or 1,
            TextColor3 = Color3.new(1, 1, 1)
        }):Play()
    end)

    button.Parent = parent
    return button
end

local function createToggle(parent, defaultText, onText, offText, onFunction, offFunction, initialState) -- As per SOULS HUB.txt, with initialState hint
    local toggleEnabled = initialState or false -- Use initialState if provided
    local toggleButton = Instance.new("TextButton")
    toggleButton.Name = "ToggleButton"
    toggleButton.Size = UDim2.new(0, 200, 0, 40) -- Original size
    toggleButton.Position = UDim2.new(0, 0, 0, #parent:GetChildren() * 45) -- Original positioning logic
    toggleButton.BackgroundTransparency = 1
    toggleButton.Text = toggleEnabled and onText or defaultText -- Set initial text based on state
    toggleButton.TextColor3 = Color3.new(1, 1, 1)
    toggleButton.Font = Enum.Font.GothamBold
    toggleButton.TextSize = 14
    toggleButton.ZIndex = 3

    if parent:FindFirstChildOfClass("UIListLayout") then
        toggleButton.LayoutOrder = #parent:GetChildren()
        toggleButton.Position = UDim2.new(0,0,0,0)
        toggleButton.Size = UDim2.new(0, 220, 0, 30) -- Standardized size
        toggleButton.BackgroundTransparency = 0.7
        toggleButton.BackgroundColor3 = Color3.fromRGB(50,50,50)
        toggleButton.TextColor3 = toggleEnabled and Color3.fromRGB(0,255,0) or Color3.fromRGB(255,0,0)
    end

    local toggleTextOutline = Instance.new("UIStroke")
    toggleTextOutline.Color = Color3.new(0, 0, 0)
    toggleTextOutline.Thickness = 1
    toggleTextOutline.Transparency = 0.3
    toggleTextOutline.Parent = toggleButton

    local outline = Instance.new("UIStroke")
    outline.Color = Color3.new(1, 1, 1)
    outline.Thickness = 1
    outline.Transparency = 0.3
    outline.Parent = toggleButton

    local corner = Instance.new("UICorner")
    corner.CornerRadius = UDim.new(0, 6)
    corner.Parent = toggleButton

    toggleButton.MouseEnter:Connect(function()
        TweenService:Create(toggleButton, TweenInfo.new(0.2), {
            BackgroundTransparency = toggleButton.Parent:FindFirstChildOfClass("UIListLayout") and 0.5 or 0.85,
        }):Play()
    end)

    toggleButton.MouseLeave:Connect(function()
        TweenService:Create(toggleButton, TweenInfo.new(0.2), {
            BackgroundTransparency = toggleButton.Parent:FindFirstChildOfClass("UIListLayout") and 0.7 or 1,
        }):Play()
    end)

    toggleButton.MouseButton1Click:Connect(function()
        toggleEnabled = not toggleEnabled
        if toggleEnabled then
            toggleButton.Text = onText or "ON"
            if parent:FindFirstChildOfClass("UIListLayout") then toggleButton.TextColor3 = Color3.fromRGB(0,255,0) end
            if onFunction then pcall(onFunction) end
        else
            toggleButton.Text = offText or "OFF"
            if parent:FindFirstChildOfClass("UIListLayout") then toggleButton.TextColor3 = Color3.fromRGB(255,0,0) end
            if offFunction then pcall(offFunction) end
        end
    end)

    toggleButton.Parent = parent
    -- Initial call to set state variable from tst.lua.txt
    if toggleEnabled then
        if onFunction then pcall(onFunction) end
    else
        if offFunction then pcall(offFunction) end
    end
    return toggleButton
end

-- Custom UI creation functions for elements not in SOULS HUB (Dropdown, Slider, Label)
-- Styled to match SOULS HUB elements
local function createStyledLabel(parent, text, name)
    local label = Instance.new("TextLabel")
    label.Name = name or "InfoLabel"
    label.Size = UDim2.new(1, -10, 0, 22) -- Adjusted for padding in list layout
    label.BackgroundTransparency = 1
    label.Text = text
    label.TextColor3 = Color3.fromRGB(220, 220, 220)
    label.Font = Enum.Font.Gotham
    label.TextSize = 14
    label.TextXAlignment = Enum.TextXAlignment.Left
    label.ZIndex = 3
    label.Parent = parent
    if parent:FindFirstChildOfClass("UIListLayout") then
        label.LayoutOrder = #parent:GetChildren()
    end
    return label
end

local function createStyledDropdown(parent, labelText, optionsTable, callback)
    addCategory(parent, labelText)
    local dropdownFrame = Instance.new("Frame")
    dropdownFrame.Name = labelText .. "DropdownFrame"
    dropdownFrame.Size = UDim2.new(0, 220, 0, 35) -- Match button size
    dropdownFrame.BackgroundTransparency = 1
    dropdownFrame.Parent = parent
    if parent:FindFirstChildOfClass("UIListLayout") then
        dropdownFrame.LayoutOrder = #parent:GetChildren()
    end

    local currentOptionIndex = 1
    local currentOptions = optionsTable or {}

    local selectedValueLabel = Instance.new("TextLabel")
    selectedValueLabel.Name = "SelectedValue"
    selectedValueLabel.Size = UDim2.new(1, -70, 1, 0) -- Space for buttons
    selectedValueLabel.Position = UDim2.new(0,0,0,0)
    selectedValueLabel.BackgroundColor3 = Color3.fromRGB(40,40,40)
    selectedValueLabel.BackgroundTransparency = 0.6
    selectedValueLabel.TextColor3 = Color3.fromRGB(200,200,200)
    selectedValueLabel.Font = Enum.Font.Gotham
    selectedValueLabel.TextSize = 12
    selectedValueLabel.TextXAlignment = Enum.TextXAlignment.Center
    selectedValueLabel.Parent = dropdownFrame
    local svlCorner = Instance.new("UICorner", selectedValueLabel); svlCorner.CornerRadius = UDim.new(0,4)

    local function updateDropdownDisplay()
        if #currentOptions == 0 then
            selectedValueLabel.Text = "(None)"
            if callback then pcall(callback, nil) end
            return
        end
        currentOptionIndex = math.max(1, math.min(currentOptionIndex, #currentOptions))
        selectedValueLabel.Text = tostring(currentOptions[currentOptionIndex])
        if callback then pcall(callback, currentOptions[currentOptionIndex]) end
    end
    
    local prevButton = createButton(dropdownFrame, "<", function()
        if #currentOptions > 0 then
            currentOptionIndex = currentOptionIndex - 1
            if currentOptionIndex < 1 then currentOptionIndex = #currentOptions end
            updateDropdownDisplay()
        end
    end)
    prevButton.Size = UDim2.new(0, 30, 1, 0)
    prevButton.Position = UDim2.new(1, -65, 0, 0)
    prevButton.AnchorPoint = Vector2.new(1,0)
    prevButton.BackgroundTransparency = 0.7
    prevButton.BackgroundColor3 = Color3.fromRGB(60,60,60)

    local nextButton = createButton(dropdownFrame, ">", function()
        if #currentOptions > 0 then
            currentOptionIndex = currentOptionIndex + 1
            if currentOptionIndex > #currentOptions then currentOptionIndex = 1 end
            updateDropdownDisplay()
        end
    end)
    nextButton.Size = UDim2.new(0, 30, 1, 0)
    nextButton.Position = UDim2.new(1, -30, 0, 0)
    nextButton.AnchorPoint = Vector2.new(1,0)
    nextButton.BackgroundTransparency = 0.7
    nextButton.BackgroundColor3 = Color3.fromRGB(60,60,60)

    local dropdownControl = {}
    function dropdownControl:updateOptions(newOptions)
        currentOptions = newOptions or {}
        currentOptionIndex = 1
        updateDropdownDisplay()
    end
    
    dropdownControl:updateOptions(optionsTable) -- Initial update
    return dropdownControl
end

local function createStyledSlider(parent, labelText, minVal, maxVal, defaultVal, stepVal, callback)
    local categoryLabel = addCategory(parent, labelText .. " (" .. tostring(defaultVal) .. ")")
    local sliderFrame = Instance.new("Frame")
    sliderFrame.Name = labelText .. "SliderFrame"
    sliderFrame.Size = UDim2.new(0, 220, 0, 35) -- Match button size
    sliderFrame.BackgroundTransparency = 1
    sliderFrame.Parent = parent
    if parent:FindFirstChildOfClass("UIListLayout") then
        sliderFrame.LayoutOrder = #parent:GetChildren()
    end

    local currentValue = defaultVal
    local step = stepVal or 1
    
    local valueLabel = Instance.new("TextLabel")
    valueLabel.Name = "ValueLabel"
    valueLabel.Size = UDim2.new(1, -70, 1, 0) 
    valueLabel.Position = UDim2.new(0,0,0,0)
    valueLabel.BackgroundColor3 = Color3.fromRGB(40,40,40)
    valueLabel.BackgroundTransparency = 0.6
    valueLabel.TextColor3 = Color3.fromRGB(200,200,200)
    valueLabel.Font = Enum.Font.Gotham
    valueLabel.TextSize = 12
    valueLabel.TextXAlignment = Enum.TextXAlignment.Center
    valueLabel.Parent = sliderFrame
    local vlCorner = Instance.new("UICorner", valueLabel); vlCorner.CornerRadius = UDim.new(0,4)

    local function updateSliderDisplay()
        currentValue = math.floor((math.max(minVal, math.min(currentValue, maxVal)) / step) + 0.5) * step -- Snap to step
        valueLabel.Text = tostring(currentValue)
        if categoryLabel then categoryLabel.Text = "--- " .. labelText .. " (" .. tostring(currentValue) .. ") ---" end
        if callback then pcall(callback, currentValue) end
    end

    local minusButton = createButton(sliderFrame, "-", function()
        currentValue = currentValue - step
        updateSliderDisplay()
    end)
    minusButton.Size = UDim2.new(0, 30, 1, 0)
    minusButton.Position = UDim2.new(1, -65, 0, 0)
    minusButton.AnchorPoint = Vector2.new(1,0)
    minusButton.BackgroundTransparency = 0.7
    minusButton.BackgroundColor3 = Color3.fromRGB(60,60,60)

    local plusButton = createButton(sliderFrame, "+", function()
        currentValue = currentValue + step
        updateSliderDisplay()
    end)
    plusButton.Size = UDim2.new(0, 30, 1, 0)
    plusButton.Position = UDim2.new(1, -30, 0, 0)
    plusButton.AnchorPoint = Vector2.new(1,0)
    plusButton.BackgroundTransparency = 0.7
    plusButton.BackgroundColor3 = Color3.fromRGB(60,60,60)
    
    updateSliderDisplay() -- Initialize
    return { updateValue = function(newValue) currentValue = newValue; updateSliderDisplay() end }
end

-- Functions from tst.lua.txt (game logic) - with task.wait and pcall for safety
local function Plant(Position: Vector3, Seed: string)
    pcall(function() GameEvents.Plant_RE:FireServer(Position, Seed) end)
    task.wait(.3)
end

local function GetFarms()
    return Farms and Farms:GetChildren() or {}
end

local function GetFarmOwner(Farm: Folder): string
    local Important = Farm and Farm:FindFirstChild("Important")
    local Data = Important and Important:FindFirstChild("Data")
    local Owner = Data and Data:FindFirstChild("Owner")
    return Owner and Owner.Value or ""
end

local function GetFarm(PlayerName: string): Folder?
    local farmsList = GetFarms()
    for _, FarmInstance in ipairs(farmsList) do
        if GetFarmOwner(FarmInstance) == PlayerName then
            return FarmInstance
        end
    end
    return nil
end

local IsSelling = false
local function SellInventory()
    if IsSelling then return end
    IsSelling = true
    local Character = LocalPlayer.Character
    if not (Character and Character.PrimaryPart and ShecklesCount) then 
        IsSelling = false
        return 
    end
    local PreviousCFrame = Character:GetPivot()
    local PreviousSheckles = ShecklesCount.Value

    Character:PivotTo(CFrame.new(62, 4, -26))
    local startTime = tick()
    repeat
        pcall(function() GameEvents.Sell_Inventory:FireServer() end)
        task.wait()
    until ShecklesCount.Value ~= PreviousSheckles or (tick() - startTime > 5) -- Timeout after 5s
    
    Character:PivotTo(PreviousCFrame)
    task.wait(0.2)
    IsSelling = false
end

local function BuySeed(Seed: string)
    pcall(function() GameEvents.BuySeedStock:FireServer(Seed) end)
end

local function BuyAllSelectedSeeds()
    local SeedToBuy = selectedBuySeed -- Use the correct variable name
    if not SeedToBuy or SeedToBuy == "" then return end
    
    -- Get current stock from the shop for the selected seed
    local shopSeedStock = GetSeedStock(false) -- false to get all stock, including 0
    local stockAmount = shopSeedStock[SeedToBuy]

    if not stockAmount or stockAmount <= 0 then 
        if autoWalkStatusLabel then autoWalkStatusLabel.Text = "Buy All: " .. SeedToBuy .. " is out of stock." end
        return 
    end

    if autoWalkStatusLabel then autoWalkStatusLabel.Text = "Buying " .. stockAmount .. " " .. SeedToBuy .. "..." end
    for i = 1, stockAmount do
        BuySeed(SeedToBuy)
        task.wait(0.1) -- Small delay between purchases
    end
    if autoWalkStatusLabel then autoWalkStatusLabel.Text = "Buy All: Finished buying " .. SeedToBuy .. "." end
    updateSeedOptionsAndDropdowns() -- Refresh stock info
end

local function GetSeedInfo(SeedTool: Tool): (string?, number?)
    local PlantName = SeedTool:FindFirstChild("Plant_Name")
    local Count = SeedTool:FindFirstChild("Numbers")
    if not PlantName then return nil, nil end
    return PlantName.Value, Count and Count.Value or 0
end

local function CollectSeedsFromParent(Parent, SeedsTable: table)
    for _, Tool in ipairs(Parent:GetChildren()) do
        if Tool:IsA("Tool") then
            local Name, Count = GetSeedInfo(Tool)
            if Name then
                SeedsTable[Name] = {Count = Count, Tool = Tool}
            end
        end
    end
end

local function CollectCropsFromParent(Parent, CropsTable: table)
    for _, Tool in ipairs(Parent:GetChildren()) do
        if Tool:IsA("Tool") then
            local Name = Tool:FindFirstChild("Item_String")
            if Name then
                table.insert(CropsTable, Tool)
            end
        end
    end
end

local function GetOwnedSeeds(): table
    OwnedSeeds = {} 
    local Character = LocalPlayer.Character
    if Character then
        CollectSeedsFromParent(Backpack, OwnedSeeds)
        CollectSeedsFromParent(Character, OwnedSeeds)
    end
    return OwnedSeeds
end

local function GetInvCrops(): table
    local Crops = {}
    local Character = LocalPlayer.Character
    if Character then
        CollectCropsFromParent(Backpack, Crops)
        CollectCropsFromParent(Character, Crops)
    end
    return Crops
end

local MyFarm, MyImportant, PlantLocations, PlantsPhysical, Dirt
local farmX1, farmZ1, farmX2, farmZ2

local function GetArea(Base: BasePart)
    local Center = Base.Position
    local Size = Base.Size
    local X1_local = math.ceil(Center.X - (Size.X/2))
    local Z1_local = math.ceil(Center.Z - (Size.Z/2))
    local X2_local = math.floor(Center.X + (Size.X/2))
    local Z2_local = math.floor(Center.Z + (Size.Z/2))
    return X1_local, Z1_local, X2_local, Z2_local
end

local function InitializeFarmData()
    MyFarm = GetFarm(LocalPlayer.Name)
    if MyFarm then
        MyImportant = MyFarm:FindFirstChild("Important")
        if MyImportant then
            PlantLocations = MyImportant:FindFirstChild("Plant_Locations")
            PlantsPhysical = MyImportant:FindFirstChild("Plants_Physical")
            if PlantLocations then
                Dirt = PlantLocations:FindFirstChildOfClass("Part")
                if Dirt then
                    farmX1, farmZ1, farmX2, farmZ2 = GetArea(Dirt)
                else
                    warn("SOULS HUB: Could not find Dirt part in PlantLocations for farm: " .. LocalPlayer.Name)
                end
            else warn("SOULS HUB: Plant_Locations not found in farm: " .. LocalPlayer.Name) end
        else warn("SOULS HUB: Important folder not found in farm: " .. LocalPlayer.Name) end
    else warn("SOULS HUB: Could not find player's farm: " .. LocalPlayer.Name) end
end

local function EquipCheck(ToolInstance)
    local Character = LocalPlayer.Character
    if not Character then return end
    local Humanoid = Character:FindFirstChildOfClass("Humanoid")
    if not Humanoid then return end
    if ToolInstance.Parent ~= Backpack then 
        if ToolInstance.Parent == Character then return end 
        local starterGearTool = LocalPlayer.StarterGear:FindFirstChild(ToolInstance.Name)
        if starterGearTool then
            local clonedTool = starterGearTool:Clone()
            clonedTool.Parent = Backpack
            ToolInstance = clonedTool -- Use the cloned tool
        else
            return
        end
    end
    Humanoid:EquipTool(ToolInstance)
end

local function GetRandomFarmPoint(): Vector3
    if not PlantLocations then InitializeFarmData() end
    if not PlantLocations then return Vector3.new(0,4,0) end
    local FarmLands = PlantLocations:GetChildren()
    if #FarmLands == 0 then return Vector3.new(0,4,0) end
    local validFarmLands = {}
    for _, land in ipairs(FarmLands) do
        if land:IsA("BasePart") then table.insert(validFarmLands, land) end
    end
    if #validFarmLands == 0 then return Vector3.new(0,4,0) end
    local FarmLand = validFarmLands[math.random(1, #validFarmLands)]
    local rX1, rZ1, rX2, rZ2 = GetArea(FarmLand)
    local X = math.random(rX1, rX2)
    local Z = math.random(rZ1, rZ2)
    local farmY = (MyFarm and MyFarm.PrimaryPart and MyFarm.PrimaryPart.Position.Y) or 4
    return Vector3.new(X, farmY + 0.5, Z)
end

local function AutoPlantLoop()
    if not currentSeed or currentSeed == "" then 
        if autoWalkStatusLabel then autoWalkStatusLabel.Text = "Auto Plant: No seed selected." end
        return 
    end
    GetOwnedSeeds() 
    local SeedData = OwnedSeeds[currentSeed]
    if not SeedData or SeedData.Count <= 0 then 
        if autoWalkStatusLabel then autoWalkStatusLabel.Text = "Auto Plant: No "..currentSeed.." seeds." end
        return 
    end
    
    local Tool = SeedData.Tool
    EquipCheck(Tool)
    task.wait(0.3) 

    if not farmX1 then InitializeFarmData() end
    if not farmX1 then 
        warn("SOULS HUB: Farm dimensions not initialized for AutoPlantLoop.")
        if autoWalkStatusLabel then autoWalkStatusLabel.Text = "Auto Plant: Farm not found." end
        return
    end

    local plantedCount = 0
    local stepSize = 1 
    local farmY = (MyFarm and MyFarm.PrimaryPart and MyFarm.PrimaryPart.Position.Y) or 0

    if autoPlantRandom then
        for i = 1, SeedData.Count do
            local point = GetRandomFarmPoint()
            Plant(point, currentSeed)
            plantedCount = plantedCount + 1
            if autoWalkStatusLabel then autoWalkStatusLabel.Text = "Auto Plant: Planted "..plantedCount.."/"..SeedData.Count end
            task.wait(0.1) 
        end
    else
        for x = farmX1, farmX2, stepSize do
            for z = farmZ1, farmZ2, stepSize do
                if plantedCount >= SeedData.Count then break end
                local point = Vector3.new(x, farmY + 0.13, z)
                Plant(point, currentSeed)
                plantedCount = plantedCount + 1
                if autoWalkStatusLabel then autoWalkStatusLabel.Text = "Auto Plant: Planted "..plantedCount.."/"..SeedData.Count end
                task.wait(0.1) 
            end
            if plantedCount >= SeedData.Count then break end
        end
    end
    if autoWalkStatusLabel then autoWalkStatusLabel.Text = "Auto Plant: Finished." end
end

local function HarvestPlant(PlantInstance: Model)
    local Prompt = PlantInstance:FindFirstChild("ProximityPrompt", true)
    if Prompt and Prompt.Enabled then
        fireproximityprompt(Prompt)
        task.wait(0.05)
    end
end

local function GetSeedStock(IgnoreNoStock: boolean?): table
    local currentSeedShop = PlayerGui:FindFirstChild("Seed_Shop")
    if not currentSeedShop then return IgnoreNoStock and {} or SeedStock end
    
    local ItemSizeFrame = currentSeedShop:FindFirstChild("Item_Size", true)
    if not ItemSizeFrame or not ItemSizeFrame.Parent then return IgnoreNoStock and {} or SeedStock end
    
    local ItemsContainer = ItemSizeFrame.Parent
    local NewList = {}
    local currentFrameSeedStock = {}

    for _, ItemFrame in ipairs(ItemsContainer:GetChildren()) do
        if ItemFrame:IsA("Frame") and ItemFrame:FindFirstChild("Main_Frame") then
            local MainFrameUI = ItemFrame.Main_Frame -- Renamed to avoid conflict
            local StockTextLabel = MainFrameUI:FindFirstChild("Stock_Text")
            if StockTextLabel and StockTextLabel:IsA("TextLabel") then
                local stockMatch = StockTextLabel.Text:match("(%d+)")
                local StockCountVal = stockMatch and tonumber(stockMatch) or 0 -- Renamed
                if IgnoreNoStock then
                    if StockCountVal > 0 then NewList[ItemFrame.Name] = StockCountVal end
                else
                    currentFrameSeedStock[ItemFrame.Name] = StockCountVal
                end
            end
        end
    end
    if not IgnoreNoStock then SeedStock = currentFrameSeedStock end
    return IgnoreNoStock and NewList or SeedStock
end

local function CanHarvest(PlantInstance): boolean?
    local Prompt = PlantInstance:FindFirstChild("ProximityPrompt", true)
    return Prompt and Prompt.Enabled
end

local function CollectHarvestable(Parent, PlantsTable, IgnoreDistance: boolean?)
    local Character = LocalPlayer.Character
    if not Character or not Character.PrimaryPart then return PlantsTable end
    local PlayerPosition = Character.PrimaryPart.Position

    for _, ChildInstance in ipairs(Parent:GetChildren()) do
        if ChildInstance:IsA("Model") then
            local Fruits = ChildInstance:FindFirstChild("Fruits")
            if Fruits then CollectHarvestable(Fruits, PlantsTable, IgnoreDistance) end
            
            local PlantPrimaryPart = ChildInstance.PrimaryPart or ChildInstance:FindFirstChildWhichIsA("BasePart")
            if not PlantPrimaryPart then continue end

            local PlantPosition = PlantPrimaryPart.Position
            local Distance = (PlayerPosition - PlantPosition).Magnitude
            if not IgnoreDistance and Distance > 20 then continue end
            
            local Variant = ChildInstance:FindFirstChild("Variant")
            if Variant and Variant:IsA("StringValue") and HarvestIgnores[Variant.Value] == true then
                -- Skip
            elseif CanHarvest(ChildInstance) then
                table.insert(PlantsTable, ChildInstance)
            end
        end
    end
    return PlantsTable
end

local function GetHarvestablePlants(IgnoreDistance: boolean?)
    local Plants = {}
    if not PlantsPhysical then InitializeFarmData() end
    if PlantsPhysical then
        CollectHarvestable(PlantsPhysical, Plants, IgnoreDistance)
    else
        warn("SOULS HUB: PlantsPhysical not found for harvesting.")
    end
    return Plants
end

local function HarvestAllPlantsFunction() 
    if not PlantsPhysical then InitializeFarmData() end
    if not PlantsPhysical then return end

    local plantsToHarvest = GetHarvestablePlants(false) 
    if autoWalkStatusLabel then autoWalkStatusLabel.Text = "Harvesting " .. #plantsToHarvest .. " plants..." end
    for _, PlantInstance in ipairs(plantsToHarvest) do
        HarvestPlant(PlantInstance)
    end
    if autoWalkStatusLabel then autoWalkStatusLabel.Text = "Harvesting: Done." end
end

local function AutoSellCheck()
    local CropCount = #GetInvCrops()
    if CropCount < sellThreshold then return end
    SellInventory()
end

local function AutoWalkLoop()
    if IsSelling then return end
    local Character = LocalPlayer.Character
    if not Character or not Character:FindFirstChild("Humanoid") then return end
    local Humanoid = Character.Humanoid

    local plantsToWalkTo = GetHarvestablePlants(true)
    local statusText = "Auto Walk: Idle"

    if #plantsToWalkTo == 0 or (autoWalkAllowRandom and math.random(1, 3) == 2) then
        local Position = GetRandomFarmPoint()
        Humanoid:MoveTo(Position)
        statusText = "Auto Walk: To random point"
        if #plantsToWalkTo == 0 then statusText = "Auto Walk: No plants, random walk." end
    elseif #plantsToWalkTo > 0 then
        local TargetPlant = plantsToWalkTo[math.random(1, #plantsToWalkTo)] 
        local PlantPrimaryPart = TargetPlant.PrimaryPart or TargetPlant:FindFirstChildWhichIsA("BasePart")
        if PlantPrimaryPart then
            local PlantPosition = PlantPrimaryPart.Position
            Humanoid:MoveTo(PlantPosition)
            statusText = "Auto Walk: To " .. TargetPlant.Name
        else
            statusText = "Auto Walk: Target plant has no PrimaryPart."
        end
    end
    if autoWalkStatusLabel then autoWalkStatusLabel.Text = statusText end
end

local noclipActive = false
local originalCollideStates = {}
local function NoclipLoop()
    local Character = LocalPlayer.Character
    if not Character then return end
    if noClip and not noclipActive then
        originalCollideStates = {}
        for _, Part in ipairs(Character:GetDescendants()) do
            if Part:IsA("BasePart") then
                originalCollideStates[Part] = Part.CanCollide
                Part.CanCollide = false
            end
        end
        noclipActive = true
    elseif not noClip and noclipActive then
        for Part, canCollide in pairs(originalCollideStates) do
            if Part and Part.Parent then 
                Part.CanCollide = canCollide
            end
        end
        originalCollideStates = {}
        noclipActive = false
    end
end

local function MakeLoop(getToggle, Func, delay)
    delay = delay or 0.1
    coroutine.wrap(function()
        while task.wait(delay) do
            if getToggle() then
                local success, err = pcall(Func)
                if not success then
                    warn("SOULS HUB Error in Loop (",tostring(Func),"):", err)
                end
            end
        end
    end)()
end

-- UI Elements and Logic from tst.lua.txt, adapted for SOULS HUB UI
local farmingContent = createTab("Farming")
local managementContent = createTab("Management")

-- Variables for dropdown controls
local seedDropdownControl
local buySeedDropdownControl

-- Function to update dropdown options (called periodically and on seed changes)
local function updateSeedOptionsAndDropdowns()
    local currentShopStock = GetSeedStock(false) -- Get all seeds from shop for buy dropdown
    local currentOwnedSeeds = GetOwnedSeeds()    -- Get currently owned seeds for plant dropdown

    local plantSeedNames = {}
    for seedName, _ in pairs(currentOwnedSeeds) do
        table.insert(plantSeedNames, seedName)
    end
    table.sort(plantSeedNames)
    if seedDropdownControl then seedDropdownControl:updateOptions(plantSeedNames) end
    if #plantSeedNames > 0 and (not currentSeed or not table.find(plantSeedNames, currentSeed)) then
        currentSeed = plantSeedNames[1]
    elseif #plantSeedNames == 0 then
        currentSeed = ""
    end

    local buySeedNames = {}
    for seedName, stockCount in pairs(currentShopStock) do
        if stockCount > 0 then -- Only show seeds in stock for buying
            table.insert(buySeedNames, seedName)
        end
    end
    table.sort(buySeedNames)
    if buySeedDropdownControl then buySeedDropdownControl:updateOptions(buySeedNames) end
    if #buySeedNames > 0 and (not selectedBuySeed or not table.find(buySeedNames, selectedBuySeed)) then
        selectedBuySeed = buySeedNames[1]
    elseif #buySeedNames == 0 then
        selectedBuySeed = ""
    end
end

-- Populate Farming Tab
addCategory(farmingContent, "Planting")
seedDropdownControl = createStyledDropdown(farmingContent, "Seed", {}, function(selected)
    currentSeed = selected
end)
createToggle(farmingContent, "Auto Plant", "Auto Plant: ON", "Auto Plant: OFF", function() autoPlant = true end, function() autoPlant = false end, autoPlant)
createToggle(farmingContent, "Plant Random", "Plant Random: ON", "Plant Random: OFF", function() autoPlantRandom = true end, function() autoPlantRandom = false end, autoPlantRandom)
createButton(farmingContent, "Plant All Current Seeds", AutoPlantLoop)

addCategory(farmingContent, "Harvesting")
createToggle(farmingContent, "Auto Harvest", "Auto Harvest: ON", "Auto Harvest: OFF", function() autoHarvest = true end, function() autoHarvest = false end, autoHarvest)
for key, value in pairs(HarvestIgnores) do
    createToggle(farmingContent, "Ignore " .. key, "Ignore " .. key .. ": ON", "Ignore " .. key .. ": OFF", 
        function() HarvestIgnores[key] = true end, 
        function() HarvestIgnores[key] = false end, 
        HarvestIgnores[key])
end

addCategory(farmingContent, "Movement & Misc")
autoWalkStatusLabel = createStyledLabel(farmingContent, "Auto Walk Status: Idle", "AutoWalkStatusLabel")
createToggle(farmingContent, "Auto Walk", "Auto Walk: ON", "Auto Walk: OFF", function() autoWalk = true end, function() autoWalk = false end, autoWalk)
createToggle(farmingContent, "Walk Randomly", "Walk Randomly: ON", "Walk Randomly: OFF", function() autoWalkAllowRandom = true end, function() autoWalkAllowRandom = false end, autoWalkAllowRandom)
createToggle(farmingContent, "NoClip", "NoClip: ON", "NoClip: OFF", 
    function() noClip = true end, 
    function() noClip = false; NoclipLoop() end, -- Ensure CanCollide is restored when toggled off
    noClip)
createStyledSlider(farmingContent, "Max Walk Delay (s)", 1, 120, autoWalkMaxWait, 1, function(value)
    autoWalkMaxWait = value
end)

-- Populate Management Tab
addCategory(managementContent, "Seed Purchasing")
buySeedDropdownControl = createStyledDropdown(managementContent, "Seed to Buy", {}, function(selected)
    selectedBuySeed = selected
end)
createToggle(managementContent, "Auto Buy Selected", "Auto Buy: ON", "Auto Buy: OFF", function() autoBuy = true end, function() autoBuy = false end, autoBuy)
createButton(managementContent, "Buy All Selected Seed Stock", BuyAllSelectedSeeds)

addCategory(managementContent, "Inventory Management")
createButton(managementContent, "Sell Inventory", SellInventory)
createToggle(managementContent, "Auto Sell Crops", "Auto Sell: ON", "Auto Sell: OFF", function() autoSell = true end, function() autoSell = false end, autoSell)
createStyledSlider(managementContent, "Sell Threshold", 1, 200, sellThreshold, 1, function(value)
    sellThreshold = value
end)

-- Activate the first tab by default
local allTabButtons = tabContainer:GetChildren()
if #allTabButtons > 0 then
    local firstTabButton = allTabButtons[1]
    if firstTabButton and firstTabButton:IsA("TextButton") then
        local firstContentFrameName = firstTabButton.Name .. "Content"
        local firstContentFrame = contentContainer:FindFirstChild(firstContentFrameName)
        if firstContentFrame then
            switchTab(firstTabButton, firstContentFrame) -- Use the new switchTab function
        end
    end
end

-- Start background services from tst.lua.txt
local function StartServices()
    InitializeFarmData()
    task.wait(1) 
    updateSeedOptionsAndDropdowns() -- Initial population of dropdowns

    MakeLoop(function() return autoPlant end, AutoPlantLoop, 0.5)
    MakeLoop(function() return autoHarvest end, HarvestAllPlantsFunction, 1)
    MakeLoop(function() return autoBuy end, BuyAllSelectedSeeds, 2)
    MakeLoop(function() return autoWalk end, function()
        AutoWalkLoop()
        task.wait(math.random(1, math.max(1, autoWalkMaxWait)))
    end, 0.2)
    MakeLoop(function() return noClip end, NoclipLoop, 0.1)
    
    coroutine.wrap(function() 
        while task.wait(5) do
            GetSeedStock() 
            GetOwnedSeeds()
            updateSeedOptionsAndDropdowns()
            if autoSell then AutoSellCheck() end
        end
    end)()
end

StartServices()

Backpack.ChildAdded:Connect(function(child)
    if autoSell then
        if child:IsA("Tool") and child:FindFirstChild("Item_String") then 
            AutoSellCheck()
        end
    end
    GetOwnedSeeds()
    updateSeedOptionsAndDropdowns()
end)

Backpack.ChildRemoved:Connect(function(child)
    GetOwnedSeeds()
    updateSeedOptionsAndDropdowns()
end)

print("SOULS HUB with tst.lua features (Version 3) loaded.")

